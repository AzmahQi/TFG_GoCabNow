import { prisma } from "@/lib/prisma";
import { pool } from "@/lib/db";
import { hash } from "bcrypt";
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    // The take the name-value of json needed
    const { name, email, password, contactNumber } = await request.json();

    const existingUserByEmail = await prisma.user.findUnique({
        where: {email: email}
    })

    const existingUserByNumber = await prisma.user.findMany({
      where: {contactNumber: contactNumber}
  })


    if (existingUserByEmail){
        return NextResponse.json({user: null, message: "User with this email already exist"},{status:409})
    }

    const hashedPassword = await hash(password,12);
    let result = null;
    
    if(existingUserByNumber.length !==0){
      //If number exist just update the data.
      result = await prisma.user.update({
        where:{
          id: existingUserByNumber.id,
        },
        data:{
            email,
            password: hashedPassword,
        }
    })

    }else{
      //Create the user
      result = await prisma.user.create({
        data:{
            email,
            password: hashedPassword,
            contactNumber
        }
    })
    }
    /*
    After the user is created. We need to create
    - Default role.
    - Default profile.
    */
  let roleRes = null;
  let profileRes = null;
    if (result.id){
      profileRes = await pool.query("INSERT INTO Profile SET ?", { userId: result.id,name });
      
      roleRes =await pool.query("INSERT INTO Role SET ?", { userId: result.id, roleName: 'Default',
      description: 'Autogenerated by registration'});
       
    }else{
      return NextResponse.json({ user: rest, message: "Peta enel if"},{status:500});
    }

    //lets hide the password
    const {password: newPassword, ...rest} = result;



    //returning the data we inserted
    return NextResponse.json({ user: rest, message: "User created successfully"},{status:201});
  } catch (error) {

    return NextResponse.json({ message: error.message }, { status: 500 });
  }
}
