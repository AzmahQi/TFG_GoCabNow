import { prisma } from "@/lib/prisma";
import { hash } from "bcrypt";
import { NextResponse } from "next/server";

export async function POST(request) {
  try {
    // The take the name-value of json needed
    const { name, email, password, contactNumber } = await request.json();

    const existingUserByEmail = await prisma.user.findUnique({
        where: {email: email}
    })

    if (existingUserByEmail){
      return NextResponse.json({user: null, message: "User with this email already exist"},{status:409})
   }
    const existingUserByNumber = await prisma.user.findMany({
      where: {contactNumber: contactNumber}
  })
  if (existingUserByNumber.length !==0 && existingUserByNumber.email !== null){
    return NextResponse.json({user: existingUserByNumber, message: "We already have an account with the number you introduced. Please try another number"},{status:409})
 }
    const hashedPassword = await hash(password,12);
    let result = null;
    if(existingUserByNumber.length !==0){
      //If number exist just update the data.
      result = await prisma.user.update({
        where:{
          id: existingUserByNumber.id,
        },
        data:{
            email,
            password: hashedPassword,
        }
    })

    }else{
      //Create the user
      result = await prisma.user.create({
        data:{
            email,
            password: hashedPassword,
            contactNumber
        }
    })
    }
    /*
    After the user is created. We need to create
    - Default role.
    - Default profile.
    - Default rolePermission
    */
    let roleRes = null;
    let profileRes = null;
    let rolePermissionRes = null;
    if (result.id) {
      const profileQuery = "INSERT INTO Profile SET ?";
      const roleQuery = "INSERT INTO Role SET ?";
      const rolesPermissionQuery = "INSERT INTO RolesPermission SET ?";

      profileRes = await pool.query(profileQuery, { userId: result.id, name });

      roleRes = await pool.query(roleQuery, {
        userId: result.id,
        roleName: 'Default',
        description: 'Autogenerated by registration',
      });

      rolePermissionRes = await pool.query(rolesPermissionQuery, {
        roleId: roleRes.insertId,
        permissionId: '2',
      });
    } else {
      return NextResponse.json(
        {
          user: result,
          message: "Couldn't create the registration logic, contact the developer.",
        },
        { status: 500 }
      );
    }

    // Let's hide the password
    const { password: newPassword, ...rest } = result;

    // Returning the data we inserted
    return NextResponse.json(
      { user: rest, message: "User created successfully" },
      { status: 201 }
    );
  } catch (error) {
    console.log(error);
    return NextResponse.json({ message: error.message }, { status: 500 });
  }
}